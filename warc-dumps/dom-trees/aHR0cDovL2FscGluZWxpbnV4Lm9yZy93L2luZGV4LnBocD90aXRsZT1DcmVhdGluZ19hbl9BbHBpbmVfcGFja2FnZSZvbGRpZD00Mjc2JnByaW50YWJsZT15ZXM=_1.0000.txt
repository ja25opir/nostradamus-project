<!DOCTYPE html><html lang="en" dir="ltr"><head>
<title>Creating an Alpine package - Alpine Linux</title>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="generator" content="MediaWiki 1.16.0beta2">
<meta name="robots" content="noindex,nofollow">
<link rel="stylesheet" href="/w/extensions/UsabilityInitiative/css/combined.min.css?89">
<link rel="stylesheet" href="/w/extensions/UsabilityInitiative/css/vector/jquery-ui-1.7.2.css?1.7.2y">
<link rel="shortcut icon" href="/w/skins/favicon.png">
<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Alpine Linux (en)">
<link rel="copyright" href="/wiki/MediaWiki:Copyright">
<link rel="alternate" type="application/atom+xml" title="Alpine Linux Atom feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom">
<link rel="stylesheet" href="/w/skins/common/commonPrint.css?268" media="">
<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=18000&amp;action=raw&amp;maxage=18000">
<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=18000&amp;action=raw&amp;maxage=18000" media="">
<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Vector.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=18000&amp;action=raw&amp;maxage=18000">
<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=18000&amp;gen=css">
<script>
var skin="vector",
stylepath="/w/skins",
wgUrlProtocols="http\\:\\/\\/|https\\:\\/\\/|ftp\\:\\/\\/|irc\\:\\/\\/|gopher\\:\\/\\/|telnet\\:\\/\\/|nntp\\:\\/\\/|worldwind\\:\\/\\/|mailto\\:|news\\:|svn\\:\\/\\/",
wgArticlePath="/wiki/$1",
wgScriptPath="/w",
wgScriptExtension=".php",
wgScript="/w/index.php",
wgVariantArticlePath=false,
wgActionPaths={},
wgServer="http://alpinelinux.org",
wgCanonicalNamespace="",
wgCanonicalSpecialPageName=false,
wgNamespaceNumber=0,
wgPageName="Creating_an_Alpine_package",
wgTitle="Creating an Alpine package",
wgAction="view",
wgArticleId=1635,
wgIsArticle=true,
wgUserName=null,
wgUserGroups=null,
wgUserLanguage="en",
wgContentLanguage="en",
wgBreakFrames=false,
wgCurRevisionId=4276,
wgVersion="1.16.0beta2",
wgEnableAPI=true,
wgEnableWriteAPI=true,
wgSeparatorTransformTable=["", ""],
wgDigitTransformTable=["", ""],
wgMainPageTitle="Main Page",
wgFormattedNamespaces={"-2": "Media", "-1": "Special", "0": "", "1": "Talk", "2": "User", "3": "User talk", "4": "Alpine Linux", "5": "Alpine Linux talk", "6": "File", "7": "File talk", "8": "MediaWiki", "9": "MediaWiki talk", "10": "Template", "11": "Template talk", "12": "Help", "13": "Help talk", "14": "Category", "15": "Category talk"},
wgNamespaceIds={"media": -2, "special": -1, "": 0, "talk": 1, "user": 2, "user_talk": 3, "alpine_linux": 4, "alpine_linux_talk": 5, "file": 6, "file_talk": 7, "mediawiki": 8, "mediawiki_talk": 9, "template": 10, "template_talk": 11, "help": 12, "help_talk": 13, "category": 14, "category_talk": 15, "image": 6, "image_talk": 7},
wgSiteName="Alpine Linux",
wgCategories=[],
wgRestrictionEdit=[],
wgRestrictionMove=[];
</script><script src="/w/skins/common/wikibits.js?268"></script>
<script src="/w/skins/common/jquery.min.js?268"></script>
<script src="/w/skins/common/ajax.js?268"></script>
<script type="text/javascript">var wgVectorPreferences = [
	
];
var wgVectorEnabledModules = {
	"collapsibletabs": true,
	"editwarning": false,
	"simplesearch": true
};</script>
<script src="/w/extensions/UsabilityInitiative/js/plugins.combined.min.js?268"></script>
<script src="/w/extensions/UsabilityInitiative/Vector/Vector.combined.min.js?268"></script>
<script type="text/javascript">mw.usability.addMessages({'vector-simplesearch-search':'Search','vector-simplesearch-containing':'containing...'});</script>
<!--[if lt IE 7]><style type="text/css">body{behavior:url("/w/skins/vector/csshover.htc")}</style><![endif]-->
<script src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=vector&amp;268"></script>

</head>
<body class="mediawiki ltr ns-0 ns-subject page-Creating_an_Alpine_package skin-vector">
		<div id="page-base" class="noprint"></div>
		<div id="head-base" class="noprint"></div>
		<!-- content -->
		<div id="content">
			<a id="top"></a>
			<div id="mw-js-message" style="display:none;"></div>
						<!-- firstHeading -->
			<h1 id="firstHeading" class="firstHeading">Creating an Alpine package</h1>
			<!-- /firstHeading -->
			<!-- bodyContent -->
			<div id="bodyContent">
				<!-- tagline -->
				<h3 id="siteSub">From Alpine Linux</h3>
				<!-- /tagline -->
				<!-- subtitle -->
				<div id="contentSub">
				<div id="mw-revision-info">Revision as of 23:03, 12 August 2010 by <a href="/w/index.php?title=User:Jbilyk&amp;action=edit&amp;redlink=1" class="new mw-userlink" title="User:Jbilyk (page does not exist)">Jbilyk</a>  <span class="mw-usertoollinks">(<a href="/wiki/User_talk:Jbilyk" title="User talk:Jbilyk">Talk</a> | <a href="/wiki/Special:Contributions/Jbilyk" title="Special:Contributions/Jbilyk">contribs</a>)</span></div>

				<div id="mw-revision-nav">(<a href="/w/index.php?title=Creating_an_Alpine_package&amp;diff=prev&amp;oldid=4276" title="Creating an Alpine package">diff</a>) <a href="/w/index.php?title=Creating_an_Alpine_package&amp;direction=prev&amp;oldid=4276" title="Creating an Alpine package">←Older revision</a> | Current revision (diff) | Newer revision→ (diff)</div>
			</div>
				<!-- /subtitle -->
																<!-- jumpto -->
				<div id="jump-to-nav">
					Jump to:<a href="#head">navigation</a>,
					<a href="#p-search">search</a>
				</div>
				<!-- /jumpto -->
								<!-- bodytext -->
				<table id="toc" class="toc"><tbody><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#General"><span class="tocnumber">1</span> <span class="toctext">General</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="#The_APKBUILDs"><span class="tocnumber">1.1</span> <span class="toctext">The APKBUILDs</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="#The_aports_tree"><span class="tocnumber">1.2</span> <span class="toctext">The aports tree</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-4"><a href="#Installing_and_configuring_the_alpine-sdk"><span class="tocnumber">2</span> <span class="toctext">Installing and configuring the alpine-sdk</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="#Getting_some_help"><span class="tocnumber">3</span> <span class="toctext">Getting some help</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="#Creating_an_APKBUILD_file"><span class="tocnumber">4</span> <span class="toctext">Creating an APKBUILD file</span></a>
<ul>
<li class="toclevel-2 tocsection-7"><a href="#Use_a_template_APKBUILD"><span class="tocnumber">4.1</span> <span class="toctext">Use a template APKBUILD</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="#Modify_your_APKBUILD"><span class="tocnumber">4.2</span> <span class="toctext">Modify your APKBUILD</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="#APKBUILD_variables.2Ffunctions"><span class="tocnumber">4.3</span> <span class="toctext">APKBUILD variables/functions</span></a>
<ul>
<li class="toclevel-3 tocsection-10"><a href="#source"><span class="tocnumber">4.3.1</span> <span class="toctext">source</span></a></li>
<li class="toclevel-3 tocsection-11"><a href="#depends_.26_makedepends"><span class="tocnumber">4.3.2</span> <span class="toctext">depends &amp; makedepends</span></a></li>
<li class="toclevel-3 tocsection-12"><a href="#license"><span class="tocnumber">4.3.3</span> <span class="toctext">license</span></a></li>
<li class="toclevel-3 tocsection-13"><a href="#url"><span class="tocnumber">4.3.4</span> <span class="toctext">url</span></a></li>
<li class="toclevel-3 tocsection-14"><a href="#pkgdesc"><span class="tocnumber">4.3.5</span> <span class="toctext">pkgdesc</span></a></li>
<li class="toclevel-3 tocsection-15"><a href="#pkgver"><span class="tocnumber">4.3.6</span> <span class="toctext">pkgver</span></a></li>
<li class="toclevel-3 tocsection-16"><a href="#pkgrel"><span class="tocnumber">4.3.7</span> <span class="toctext">pkgrel</span></a></li>
<li class="toclevel-3 tocsection-17"><a href="#pkgname"><span class="tocnumber">4.3.8</span> <span class="toctext">pkgname</span></a></li>
<li class="toclevel-3 tocsection-18"><a href="#install"><span class="tocnumber">4.3.9</span> <span class="toctext">install</span></a>
<ul>
<li class="toclevel-4 tocsection-19"><a href="#.24pkgname.pre-install"><span class="tocnumber">4.3.9.1</span> <span class="toctext">$pkgname.pre-install</span></a></li>
<li class="toclevel-4 tocsection-20"><a href="#.24pkgname.post-install"><span class="tocnumber">4.3.9.2</span> <span class="toctext">$pkgname.post-install</span></a></li>
<li class="toclevel-4 tocsection-21"><a href="#.24pkgname.pre-upgrade"><span class="tocnumber">4.3.9.3</span> <span class="toctext">$pkgname.pre-upgrade</span></a></li>
<li class="toclevel-4 tocsection-22"><a href="#.24pkgname.post-upgrade"><span class="tocnumber">4.3.9.4</span> <span class="toctext">$pkgname.post-upgrade</span></a></li>
<li class="toclevel-4 tocsection-23"><a href="#.24pkgname.pre-deinstall"><span class="tocnumber">4.3.9.5</span> <span class="toctext">$pkgname.pre-deinstall</span></a></li>
<li class="toclevel-4 tocsection-24"><a href="#.24pkgname.post-deinstall"><span class="tocnumber">4.3.9.6</span> <span class="toctext">$pkgname.post-deinstall</span></a></li>
</ul>
</li>
<li class="toclevel-3 tocsection-25"><a href="#subpackages"><span class="tocnumber">4.3.10</span> <span class="toctext">subpackages</span></a>
<ul>
<li class="toclevel-4 tocsection-26"><a href="#Custom_subpackages"><span class="tocnumber">4.3.10.1</span> <span class="toctext">Custom subpackages</span></a></li>
</ul>
</li>
<li class="toclevel-3 tocsection-27"><a href="#Patches"><span class="tocnumber">4.3.11</span> <span class="toctext">Patches</span></a></li>
<li class="toclevel-3 tocsection-28"><a href="#Configure_options"><span class="tocnumber">4.3.12</span> <span class="toctext">Configure options</span></a></li>
<li class="toclevel-3 tocsection-29"><a href="#Make_options"><span class="tocnumber">4.3.13</span> <span class="toctext">Make options</span></a></li>
<li class="toclevel-3 tocsection-30"><a href="#Additional_files"><span class="tocnumber">4.3.14</span> <span class="toctext">Additional files</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1 tocsection-31"><a href="#Build_the_package"><span class="tocnumber">5</span> <span class="toctext">Build the package</span></a></li>
<li class="toclevel-1 tocsection-32"><a href="#Commit_your_work"><span class="tocnumber">6</span> <span class="toctext">Commit your work</span></a></li>
</ul>
</td></tr></tbody></table><script>if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } </script>
<h2> <span class="mw-headline" id="General"> General </span></h2>
<p>This document assumes that you have a working <a href="/wiki/Setting_up_the_build_environment" title="Setting up the build environment">build environment</a>, or use a diskbased alpine installation. 
</p>
<h3> <span class="mw-headline" id="The_APKBUILDs"> The APKBUILDs  </span></h3>
<p>The <i><a href="http://dev.alpinelinux.org/cgit/abuild/" class="external text" rel="nofollow">abuild</a></i> script reads the <i><a href="http://dev.alpinelinux.org/cgit/abuild/tree/sample.APKBUILD" class="external text" rel="nofollow">APKBUILD</a></i> and executes the steps needed to create a package. 
</p>
<h3> <span class="mw-headline" id="The_aports_tree"> The aports tree  </span></h3>
<p>The <a href="http://dev.alpinelinux.org/cgit/aports" class="external text" rel="nofollow">aports</a> tree is a <a href="http://dev.alpinelinux.org/cgit/aports/tree" class="external text" rel="nofollow">directory tree</a> with many APKBUILDs. Those files are used when building alpine from source. 
</p>
<h2> <span class="mw-headline" id="Installing_and_configuring_the_alpine-sdk"> Installing and configuring the alpine-sdk  </span></h2>
<p>The alpine-sdk is a metapackage that pulls in the most essential packages used to build new packages.<br>
Install those packages now: 
</p>
<pre> apk add alpine-sdk
</pre>
<p>This would be a good time to create a normal user account for you to work in. (You weren't going to develop as root now, were you!) To create the user:
</p>
<pre> adduser &lt;yourusername&gt;
</pre>
<p>To make life easier later, it's a good idea to add this user to /etc/sudoers. Append the line
</p><p>&lt;yourusername&gt;    ALL=(ALL) ALL
</p><p>using the command:
</p>
<pre> visudo
</pre>
<p>Now logout of the root account, and login as &lt;yourusername&gt;. From here on everything can be done in a normal user account, and operations that require superuser privileges can be done with sudo.
</p><p>The aports tree is in git so before we clone the aports tree we should configure git.
</p>
<pre> git config --global user.name "Your Full Name"
 git config --global user.email "your@email.address"
</pre>
<p>Now we can clone the aports tree. 
</p>
<pre> git clone git://dev.alpinelinux.org/aports
</pre>
<p>Before we start creating or modifying APKBUILD files we need to setup abuild to our system/user. Edit the file abuild.conf to your requirements. Most of the defaults can be left alone, unless you are developing for a custom platform, in which case the comments in the file should guide you. The one field to edit is PACKAGER, so that you can get credit (or blame) for packages you create.
</p>
<pre> sudo vi /etc/abuild.conf
</pre>
<p>The last step in preparation is to configure the security keys for abuild with the command:
</p>
<pre> abuild-keygen -a -i
</pre>
<h2> <span class="mw-headline" id="Getting_some_help"> Getting some help </span></h2>
<p>It might be wise to start by checking what the abuild program can/cannot do.
</p>
<pre>abuild -h
</pre>
<h2> <span class="mw-headline" id="Creating_an_APKBUILD_file"> Creating an APKBUILD file  </span></h2>
<h3> <span class="mw-headline" id="Use_a_template_APKBUILD"> Use a template APKBUILD </span></h3>
<p>To create the actual APKBUILD file abuild has the option -n (new). It will simply copy an example/template APKBUILD file to the given directory and fill some variables.<br>
If you are create a daemon package which needs initd scripts you can add the -c making it: 
</p>
<pre>abuild -c -n <i>packagename</i>
</pre>
<p><i><b>NOTE:</b> The 'packagename' is a parameter to the -n option so order of -c and -n matters.  Further, on newer Alpine systems, 'newapkbuild' has replaced abuild with the -n switch.</i>
</p><p>This will copy the sample initd and confd files to the build directory.<br>
A third file sample.install file will be copied as well (we will discuss this later on).
</p>
<h3> <span class="mw-headline" id="Modify_your_APKBUILD"> Modify your APKBUILD </span></h3>
<p>Edit APKBUILD and fill in the needed info (especially pkgname, pkgver, pkgdesc, url, license, depends and source). 
</p><p>If you are going to use any of the variables for directories like $pkgdir, always make sure they are double quoted like: 
</p>
<pre>"$pkgdir"/somedir
</pre>
<p>This will prevent issues with spaces/special characters in the future. 
</p><p><i><b>Note:</b> If you like syntax highlighting we suggest you to install vim. We have setup vim to recognize the APKBUILD file as a bash scripts so its easier to read them.</i>
</p>
<h3> <span class="mw-headline" id="APKBUILD_variables.2Ffunctions"> APKBUILD variables/functions  </span></h3>
<h4> <span class="mw-headline" id="source"> source  </span></h4>
<p>Source is not only the link from which abuild will fetch the source, it should also hold all files abuild needs to build the apk. This could mean initd file, confd file, install file, patches or any other file needed. When you are finished adding them you can execute the following command to add their checksums to the APKBUILD file: 
</p>
<pre>abuild checksum
</pre>
<p>Another thing to note is when a package is using sourceforge for hosting. If so you should specify the special mirrors link used by sf: 
</p>
<pre><a href="http://downloads.sourceforge.net/$pkgname/$pkgname-$pkgver.tar.gz" class="external free" rel="nofollow">http://downloads.sourceforge.net/$pkgname/$pkgname-$pkgver.tar.gz</a> 
</pre>
<p>(or similar depending on the package). 
</p><p>Currently abuild supports the following archives/extensions: 
</p>
<pre>*.tar.gz, *.tgz, *.tar.bz2, *.tar.lzma, *.zip
</pre>
<h4> <span class="mw-headline" id="depends_.26_makedepends"> depends &amp; makedepends  </span></h4>
<p>Depends are the actual running dependencies that a package would need when it is running. Makedepends are only needed when you are building a package. If you set a package, in depends you do not need to add it to makedepends as well. The best way to find out what the depends and makedepends of a package are is to <a href="http://en.wikipedia.org/wiki/Rtfm" class="external text" rel="nofollow">RTFM</a>. 
</p><p>No kidding, lots of important information can be found it the package INSTALL and README file (or the likes). Another good way is the run ./configure --help from the source directory to see which options are needed for configure to finish without errors. If you do not yet have a src directory you can create one with the command: 
</p>
<pre>abuild unpack
</pre>
<p>Running configure will also show you how you can disable a specific option for this package. A good example is for instance "--disable-nls" which will disable native language support and thus does not depend on gettext(libiconv,glib..). 
</p><p>Alpine likes to keep things small, so we try to disable as much as possible without losing too many features. The exact disable/enable options are decided the package builder but please try to follow Alpine's design concept as much as possible. 
</p><p>An easy way of quickly finding out the build info for a package is to check Archlinux (Alpine package management and build scripts are similar) or Gentoo linux ebuilds (previous versions of Alpine were based on Gentoo). 
</p><p><a href="http://www.gentoo-portage.com" class="external text" rel="nofollow">Search ebuilds</a> 
</p><p><a href="http://sources.gentoo.org/viewcvs.py/gentoo-x86/" class="external text" rel="nofollow">Gentoo CVS</a> 
</p><p><a href="http://www.archlinux.org/packages/search/" class="external text" rel="nofollow">Archlinux packages</a> 
</p><p>After the package is successfully compiled and created we should make sure it didn't link to any package that is not present in the $depends variable. We do this by using scanelf. If scanelf is not yet installed on your system you can do that by installing pax-utils. 
</p>
<pre>scanelf -nR pkg
</pre>
<p>An example output of libcurl would be: 
</p>
<pre>ET_DYN libssl.so.0.9.8,libcrypto.so.0.9.8,libz.so.1,libc.so.0,ld-uClibc.so.0 pkg/usr/lib/libcurl.so.4.1.1
</pre>
<p>You can see the needed files and should be able to find out which file belongs to which package.
</p>
<h4> <span class="mw-headline" id="license"> license  </span></h4>
<p>If a package has a special/custom license we need to provide it with the release. Because we want to save space and don't like to have licenses all over our system we have decided to include the license in the doc subpackage. Please follow the following guidelines to add a proper license. Locate the license file inside the source package. Add the doc subpackage to the $subpackages variable as follows: 
</p>
<pre>subpackages="$pkgname-doc"
</pre>
<p>Add a similar line to the following to your build() function, depending on the license description file: 
</p>
<pre>install -Dm644 COPYING "$pkgdir"/usr/share/licenses/$pkgname/COPYING
</pre>
<p>If you follow these steps then abuild will automatically add the license to the package-doc apk for you.
</p>
<h4> <span class="mw-headline" id="url"> url  </span></h4>
<p>Website address for the program. This is usefully later on when either finding documentation or other information about the package.
</p>
<h4> <span class="mw-headline" id="pkgdesc"> pkgdesc  </span></h4>
<p>A brief, one line, description of what the package does. Useful for the package management system.
</p><p>Here is an example from apk_info for the OpenSSH client package
</p>
<pre>pkgdesc="Port of OpenBSD's free SSH release - client"
</pre>
<h4> <span class="mw-headline" id="pkgver"> pkgver  </span></h4>
<p>Provide the release number of the package you are building.
</p>
<h4> <span class="mw-headline" id="pkgrel"> pkgrel  </span></h4>
<p>The $pkgrel versioning is made so if you change something to your APKBUILD file without changing the actual $pkgver you can higer pkgrel so apk tools will detect it as an update. For instance if you forget to add a dependency you can add it afterward and you can +1 pkgver so apk finds this update and add the missing dependency. 
</p>
<h4> <span class="mw-headline" id="pkgname"> pkgname  </span></h4>
<p>The base name of the package you are creating.  For Freeswitch 1.0.6, you would use "freeswitch"
</p>
<h4> <span class="mw-headline" id="install"> install  </span></h4>
<p>There are 6 different kinds of install scripts. Each script is called with the $pkgname.<i>&lt;action&gt;</i> where <i>&lt;action&gt;</i> is one of the following:
</p>
<h5> <span class="mw-headline" id=".24pkgname.pre-install"> $pkgname.pre-install </span></h5>
<p>This script is executed before package is installed. Typical use is when package needs a user/group to be created. For example:
</p>
<pre>#!/bin/sh
adduser -H -s /bin/false -D clamav 2&gt;/dev/null
exit 0
</pre>
<p>Note the <i>exit 0</i> at the end. If the script exits with failure (if the user already exist), the package will not be installed and apk add will exit with failure.
</p>
<h5> <span class="mw-headline" id=".24pkgname.post-install"> $pkgname.post-install </span></h5>
<p>This script is executed after package is installed. Can be used to generate font cache and similar.
</p>
<h5> <span class="mw-headline" id=".24pkgname.pre-upgrade"> $pkgname.pre-upgrade </span></h5>
<p>Same as pre-install but is executed before upgrading an already installed package.
</p>
<h5> <span class="mw-headline" id=".24pkgname.post-upgrade"> $pkgname.post-upgrade </span></h5>
<p>Same as post-install but is executed after upgrading an already installed package. 
</p>
<h5> <span class="mw-headline" id=".24pkgname.pre-deinstall"> $pkgname.pre-deinstall </span></h5>
<p>This script is executed before uninstalling a package. If script exits with failure apk will not uninstall the package.
</p>
<h5> <span class="mw-headline" id=".24pkgname.post-deinstall"> $pkgname.post-deinstall </span></h5>
<p>This script is executed after a package have been uninstalled. Can be used to update font caches and restore busybox links. For example:
</p>
<pre>#!/bin/sh
busybox --install -s
</pre>
<p><br>
If the package have an pre-install and post-install script the APKBUILD should have the <i>install</i> variable defined and the scripts should also be added to the source variable:
</p>
<pre>...
install="$pkgname.pre-install $pkgname.post-install"
source="http://....
       $install"
...
</pre>
<h4> <span class="mw-headline" id="subpackages"> subpackages  </span></h4>
<p>$subpackages are made to split up the normal "make install" into separate packages. The most common subpackages we use are doc and dev. Because we like to keep our target system small we move documentation and development files (only needed when building packages) into separate packages. To use the specific program a user only need to install the base apk without package-doc or package-dev, but if he wants to read the manual he will need to install package-doc. 
</p><p>The easiest way to find out if you need to use -dev and -doc is to first build the package without these options set and wait until the build finishes. When its finished you should have a pkg directory which is the fake root directory. Inside this directory you will see the structure as how it would be installed in / on the target system. 
</p><p>To see if you need the -dev package you can run the following cmd: 
</p>
<pre>find pkg/usr/ -name '*.[acho]' -o -name '*.la'
</pre>
<p>If this returns any files you need to include the -dev package. 
</p><p><br> To see if you need the -doc package you can run the following cmd: 
</p>
<pre>find pkg/usr/share -name doc -o -name man -o -name info -o -name html -o -name sgml -o -name licenses
</pre>
<p>If this returns any directories you need to include the -doc package. 
</p>
<h5> <span class="mw-headline" id="Custom_subpackages"> Custom subpackages  </span></h5>
<p>Some applications will have except doc and dev files other non needed at run time files which we want to separate away from the base package. Some packages include large test suites which are only needed in specific circumstances or binaries which have depends which we prefer not to install. To handle those we create our own package/function. In the APKBUILD below the build() function we create another function: 
</p>
<pre>test() {
       mkdir -p "$subpkgdir"/usr
       mv "$pkgdir"/usr/package-test "$subpkgdir"/usr/
}

</pre>
<p>We also need to add the package info to $subpackages variable: 
</p>
<pre>subpackages="$pkgname-doc $pkgname-dev $pkgname-test"
</pre>
<p>After we finish building the package you should see another apk called packagename-test.apk which includes the files which we moved to the $subpkgdir dir. 
</p><p>The above mentioned variables can also be used in our custom function. If we want for instance to build the test() function with perl support we would add: 
</p>
<pre>depends="perl"
makedepends="perl-dev"
</pre>
<p>If we would install the base package it would not install perl, but if we install the package-test package it would.
</p>
<h4> <span class="mw-headline" id="Patches"> Patches  </span></h4>
<p>Please make sure you always submit human readable patches. Way's to create them are: 
</p><p>directory compare: 
</p>
<pre>diff -urp original_directory new_directory &gt; filename.patch
</pre>
<p>file compare: 
</p>
<pre>diff -up original.file new.file &gt; filename.patch
</pre>
<p>If you are going to use multiple patches for a single package, the preferred way to handle those is a loop and numbering the patches. 
</p>
<pre>for i in "$srcdir"/*.patch; do
       msg "Applying ${i}"
       patch -p0 -i $i || return 1
done
</pre>
<p>Because multiple patches can patch the same file, we could create offset for the next patch. To make sure we always patch in a specified way we should number the patches as followed: 
</p>
<pre>10-patch1.patch 20-patch2.patch 30-patch3.patch
</pre>
<p>This way we are always sure patch 1 is first and if we want to add additional patches between them we can use 11,12,21,22... 
</p>
<h4> <span class="mw-headline" id="Configure_options"> Configure options  </span></h4>
<p>Alpine has some default configure options we set by default. We use /usr for prefix to make sure everyting is installed with /usr in front of it. If you notice that anything is installed in the wrong directory please run ./configure --help and see if you can set the correct location. 
</p><p>We are not covering the depend switches here we have discussed this already in the depend section. 
</p>
<h4> <span class="mw-headline" id="Make_options"> Make options  </span></h4>
<p>If you notice weird problems when compiling or installing the package with make/make install you could try to disable <a href="http://www.gnu.org/software/make/manual/make.html#Parallel" class="external text" rel="nofollow">parallel</a> building/installing. A normal make line would be: 
</p>
<pre>make || return 1
</pre>
<p>To disable parallel we use: 
</p>
<pre>make -j1 || return 1
</pre>
<p>We can use the same for make install. 
</p><p>Because we do not want to install the package in our build environment but we want to install it in a fake root directory we need to tell 'make install' to use another destination directory instead of '/'. We do this by setting a variable when we execute make install as followed: 
</p>
<pre>make DESTDIR="$pkgdir" install
</pre>
<p>Please note that some Makefiles do not support this variable and will always install software in '/'. To make sure you do not mess up your build system NEVER run your build system as root but always use a custom user and sudo when needed. If by accident the Makefile does not support DESTDIR variable it will fail to install in our build system system directories.
</p>
<h4> <span class="mw-headline" id="Additional_files"> Additional files  </span></h4>
<p>If you want/need to install additional files not mentioned above you can use the following cmd (this is an example of a conf file): 
</p>
<pre>install -Dm644 doc/$pkgname.conf "$pkgdir"/etc/$pkgname.conf
</pre>
<h2> <span class="mw-headline" id="Build_the_package"> Build the package  </span></h2>
<p>If you did not already create the checksums as mentioned above you can do so now: 
</p>
<pre>cd $pkgname
abuild checksum
</pre>
<p>Its about time we build our package. Because a build system should never have all the package installed to prevent linking to packages we dont want it to link we use a abuild recursively with the -r switch. It will install all dependency's from your repository and builds it, afterwards it will uninstall all those depending packages again. You could also use the -R switch which would build your package including the dependency packages. 
</p>
<pre>abuild -r
</pre>
<h2> <span class="mw-headline" id="Commit_your_work"> Commit your work  </span></h2>
<p>After you successfully build your package you can submit your APKBUILD to alpine git repository. 
</p><p>Update you git repo, before adding new files: 
</p>
<pre>cd $aportsdir
git pull
</pre>
<p>This should pull all the changes made by others into you local git repo. When you think you are ready you can add your files to git: 
</p>
<pre>cd $apkbuilddir
git add APKBUILD (include any other files needed for the build; $pkgname.install...)
git commit
</pre>
<p>Now your changes are only available locally in your repo. Because you do not have push rights to the alpine repo you need to create diff (patch) of the changes you made: 
</p>
<pre>git format-patch -1
</pre>
<p>Where -1 sets how many commits you want to go back (mostly this is 1). This should create a patch called 0001......patch. 
</p><p>An easy way to send this patch to the list is with an program called 'email'. 
</p>
<pre>apk_add email
</pre>
<p>to send to the mailing list you would do: 
</p>
<pre>email -a 0001...patch alpine-devel@lists.alpinelinux.org
</pre>
<p>And provide a subject and body after you execute the above cmd. 
</p><p><br> If you doubt to which repo your package belongs to you can safely use testing.
</p>
<!-- 
NewPP limit report
Preprocessor node count: 153/1000000
Post-expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Expensive parser function count: 0/100
-->
<div class="printfooter">
Retrieved from "<a href="http://alpinelinux.org/wiki/Creating_an_Alpine_package">http://alpinelinux.org/wiki/Creating_an_Alpine_package</a>"</div>
				<!-- /bodytext -->
								<!-- catlinks -->
				<div id="catlinks" class="catlinks catlinks-allhidden"></div>				<!-- /catlinks -->
												<div class="visualClear"></div>
			</div>
			<!-- /bodyContent -->
		</div>
		<!-- /content -->
		<!-- header -->
		<div id="head" class="noprint">
			
<!-- 0 -->
<div id="p-personal" class="">
	<h5>Personal tools</h5>
	<ul>
					<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Creating_an_Alpine_package&amp;returntoquery=oldid%3D4276%26printable%3Dyes">Log in / create account</a></li>
			</ul>
</div>

<!-- /0 -->
			<div id="left-navigation">
				
<!-- 0 -->
<div id="p-namespaces" class="vectorTabs">
	<h5>Namespaces</h5>
	<ul>
					<li id="ca-nstab-main" class="selected"><a href="/wiki/Creating_an_Alpine_package"><span>Page</span></a></li>
					<li id="ca-talk"><a href="/wiki/Talk:Creating_an_Alpine_package"><span>Discussion</span></a></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-variants" class="vectorMenu emptyPortlet">
	<h5><span>Variants</span><a href="#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->
			</div>
			<div id="right-navigation">
				
<!-- 0 -->
<div id="p-views" class="vectorTabs">
	<h5>Views</h5>
	<ul>
					<li id="ca-view" class="selected"><a href="/wiki/Creating_an_Alpine_package"><span>Read</span></a></li>
					<li id="ca-viewsource"><a href="/w/index.php?title=Creating_an_Alpine_package&amp;action=edit"><span>View source</span></a></li>
					<li id="ca-history" class="collapsible "><a href="/w/index.php?title=Creating_an_Alpine_package&amp;action=history"><span>View history</span></a></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-cactions" class="vectorMenu emptyPortlet">
	<h5><span>Actions</span><a href="#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->

<!-- 2 -->
<div id="p-search">
	<h5><label for="searchInput">Search</label></h5>
	<form action="/w/index.php" id="searchform">
		<input type="hidden" name="title" value="Special:Search">
				<div id="simpleSearch">
			<input id="searchInput" name="search" type="text" value="">
			<button id="searchButton" type="submit" name="button">&nbsp;</button>
		</div>
			</form>
</div>

<!-- /2 -->
			</div>
		</div>
		<!-- /header -->
		<!-- panel -->
			<div id="panel" class="noprint">
				<!-- logo -->
					<div id="p-logo"><a style="background-image: url(/w/skins/alogo.png);" href="/wiki/Main_Page"></a></div>
				<!-- /logo -->
				
<!-- Welcome -->
<div class="portal" id="p-Welcome">
	<h5>Welcome</h5>
	<div class="body">
				<ul>
					<li id="n-About"><a href="/wiki/About">About</a></li>
					<li id="n-Downloads"><a href="/wiki/Downloads">Downloads</a></li>
					<li id="n-Install"><a href="/wiki/Installation">Install</a></li>
					<li id="n-FAQ"><a href="/wiki/FAQ">FAQ</a></li>
					<li id="n-Tutorials-and-Howtos"><a href="/wiki/Tutorials_and_Howtos">Tutorials and Howtos</a></li>
					<li id="n-Support"><a href="/wiki/Support">Support</a></li>
					<li id="n-Contribute"><a href="/wiki/Contribute">Contribute</a></li>
					<li id="n-Development"><a href="/wiki/Developer_Documentation">Development</a></li>
					<li id="n-Misc-References"><a href="/wiki/Misc">Misc References</a></li>
				</ul>
			</div>
</div>

<!-- /Welcome -->

<!-- Services -->
<div class="portal" id="p-Services">
	<h5>Services</h5>
	<div class="body">
				<ul>
					<li id="n-Bug-Tracker"><a href="http://bugs.alpinelinux.org">Bug Tracker</a></li>
					<li id="n-Git-Repositories"><a href="http://git.alpinelinux.org">Git Repositories</a></li>
					<li id="n-Mailing-Lists"><a href="/wiki/Mailing_lists">Mailing Lists</a></li>
					<li id="n-IRC-Channels"><a href="/wiki/IRC">IRC Channels</a></li>
				</ul>
			</div>
</div>

<!-- /Services -->

<!-- Wiki -->
<div class="portal" id="p-Wiki">
	<h5>Wiki</h5>
	<div class="body">
				<ul>
					<li id="n-Recent-Changes"><a href="/wiki/Special:RecentChanges">Recent Changes</a></li>
				</ul>
			</div>
</div>

<!-- /Wiki -->

<!-- SEARCH -->

<!-- /SEARCH -->

<!-- TOOLBOX -->
<div class="portal" id="p-tb">
	<h5>Toolbox</h5>
	<div class="body">
		<ul>
					<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Creating_an_Alpine_package">What links here</a></li>
						<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Creating_an_Alpine_package">Related changes</a></li>
																																										<li id="t-specialpages"><a href="/wiki/Special:SpecialPages">Special pages</a></li>
											<li id="t-permalink"><a href="/w/index.php?title=Creating_an_Alpine_package&amp;oldid=4276">Permanent link</a></li>
						</ul>
	</div>
</div>

<!-- /TOOLBOX -->

<!-- LANGUAGES -->

<!-- /LANGUAGES -->
			</div>
		<!-- /panel -->
		<!-- footer -->
		<div id="footer">
											<ul id="footer-info">
																	<li id="footer-info-copyright"><div align="right"><div id="footer-inner"> 
  <p><a href="Privacy_Policy#Copyright">© Copyright 2010 Alpine Linux Development Team</a> 
  all rights reserved  |  <a href="Privacy_Policy">Privacy Policy</a></p> 
</div></div></li>
															</ul>
																	<ul id="footer-icons" class="noprint">
				<!--				<li id="footer-icon-poweredby"><a href="http://www.mediawiki.org/"><img src="/w/skins/common/images/poweredby_mediawiki_88x31.png" height="31" width="88" alt="Powered by MediaWiki" /></a></li> -->
											</ul>
			<div style="clear:both"></div>
		</div>
		<!-- /footer -->
		<!-- fixalpha -->
		<script type="text/javascript"> if ( window.isMSIE55 ) fixalpha(); </script>
		<!-- /fixalpha -->
		
<script>if (window.runOnloadHook) runOnloadHook();</script>
		<!-- Served in 0.168 secs. -->			

</body></html>